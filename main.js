/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeBlockFromSelection
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CodeBlockFromSelection = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "code-block-from-selection",
      name: "Code block from selection",
      callback: () => this.insertCodeBlock()
    });
  }
  insertCodeBlock() {
    let editor = this.getEditor();
    if (editor) {
      let selectedText = editor.getSelection();
      editor.replaceSelection(`
\`\`\`${selectedText}
\`\`\`
`);
    }
  }
  getEditor() {
    var _a;
    return (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.sourceMode.cmEditor;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgKiBhcyBDb2RlTWlycm9yIGZyb20gJ2NvZGVtaXJyb3InO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvZGVCbG9ja0Zyb21TZWxlY3Rpb24gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ2NvZGUtYmxvY2stZnJvbS1zZWxlY3Rpb24nLFxyXG5cdFx0XHRuYW1lOiAnQ29kZSBibG9jayBmcm9tIHNlbGVjdGlvbicsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB0aGlzLmluc2VydENvZGVCbG9jaygpXHJcblx0XHR9KTtcclxuXHR9XHJcblx0aW5zZXJ0Q29kZUJsb2NrKCk6IHZvaWQge1xyXG5cdFx0bGV0IGVkaXRvciA9IHRoaXMuZ2V0RWRpdG9yKCk7XHJcblx0XHRpZiAoZWRpdG9yKSB7XHJcblx0XHRcdGxldCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcblx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGBcXG5cXGBcXGBcXGAke3NlbGVjdGVkVGV4dH1cXG5cXGBcXGBcXGBcXG5gKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldEVkaXRvcigpOiBDb2RlTWlycm9yLkVkaXRvciB7XHJcblx0XHRyZXR1cm4gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KT8uc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHR9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE0RjtBQUk1RixJQUFxQix5QkFBckIsY0FBb0QsdUJBQU87QUFBQSxFQUMxRCxNQUFNLFNBQVM7QUFFZCxTQUFLLFdBQVc7QUFBQSxNQUNmLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTSxLQUFLLGdCQUFnQjtBQUFBLElBQ3RDLENBQUM7QUFBQSxFQUNGO0FBQUEsRUFDQSxrQkFBd0I7QUFDdkIsUUFBSSxTQUFTLEtBQUssVUFBVTtBQUM1QixRQUFJLFFBQVE7QUFDWCxVQUFJLGVBQWUsT0FBTyxhQUFhO0FBQ3ZDLGFBQU8saUJBQWlCO0FBQUEsUUFBVztBQUFBO0FBQUEsQ0FBd0I7QUFBQSxJQUM1RDtBQUFBLEVBQ0Q7QUFBQSxFQUVBLFlBQStCO0FBckJoQztBQXNCRSxZQUFPLFVBQUssSUFBSSxVQUFVLG9CQUFvQiw0QkFBWSxNQUFuRCxtQkFBc0QsV0FBVztBQUFBLEVBQ3pFO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
